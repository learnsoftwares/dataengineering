- Views:
  - Definition: A virtual table based on the results of a SELECT query.
  - Purpose: Offers a window on specified rows in underlying tables.

  - Example:
    
    CREATE VIEW Deliveries
    AS
    SELECT o.OrderNo, o.OrderDate,
           c.FirstName, c.LastName, c.Address, c.City
    FROM Order AS o JOIN Customer AS c
    ON o.Customer = c.ID;
    
  - Usage: Views can be queried and filtered like tables, providing a convenient way to access and organize data.

- Stored Procedures:
  - Definition: Defines SQL statements for programmatic actions.
  - Purpose: Encapsulates logic for common tasks in a database.
  
   - Example:
    
    CREATE PROCEDURE RenameProduct
        @ProductID INT,
        @NewName VARCHAR(20)
    AS
    UPDATE Product
    SET Name = @NewName
    WHERE ID = @ProductID;
    
  - Usage: Stored procedures can be executed with parameters to perform specific actions, improving data manipulation and application interactions.

- Indexes:
  - Definition: A structure to optimize data search in a table.
  - Analogy: Similar to an index in a book, providing a sorted set of references for quick data retrieval.
 
 - Example:
    
    CREATE INDEX idx_ProductName
    ON Product(Name);
    
  - Purpose: Enhances query performance by allowing the database to quickly locate data based on the indexed column.
  - Considerations: Indexes consume storage space and impact insert, update, and delete operations. Balancing act between query performance and operational costs.

- Balancing Act for Indexing:
  - Index Benefits: Improved query performance, especially in large tables.
  - Index Costs: Storage consumption and additional maintenance during insert, update, and delete operations.
  - Strategy: Choose indexes strategically based on the queries frequently executed and weigh the benefits against the associated costs.


--------------------------------------
  
These structures—views, stored procedures, and indexes—play essential roles in optimizing data organization, encapsulating programmatic actions, and enhancing the speed of data access in a relational database. 
Strategic use of these structures contributes to efficient database management and application performance.
